<?php

namespace Tests\Feature;

use App\Http\Controllers\CartController;
use App\Models\Cart;
use App\Models\Category;
use App\Models\Product;
use App\Models\Subcategory;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\Session;
use Tests\TestCase;

class CartControllerTest extends TestCase
{

    use DatabaseMigrations;

    public function setUp (): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        self::initModel();
    }

    private static function initModel() {
        self::generateCategory();
        self::generateSubCategory(self::getCategory());
        self::generateCart();
        self::generateProducts(self::getSubCategory(), 5);
    }

    private static function generateCart() {
        Cart::factory()
            ->count(1)
            ->create([
                'status' => Cart::STATUS_OPEN,
            ]);
    }

    private static function getCart(): Cart {
        return CartController::getCurrentCart();
    }

    private static function generateProducts(Subcategory $subcategory, int $count) {
        Product::factory()
            ->count($count)
            ->create([
                'subcategory_id' => $subcategory->id,
                'quantity' => 10,
            ]);
    }


    private static function getProduct(): Product {
        return Product::all()
            ->first();
    }

    private static function generateCategory() {
        Category::factory()
            ->count(1)
            ->create();
    }
    private static function getCategory(): Category {
        return Category::all()
            ->shuffle()
            ->first();
    }

    private static function generateSubCategory(Category $category) {
        Subcategory::factory()
            ->count(1)
            ->create([
                'category_id' => $category->id,
            ]);
    }
    private static function getSubCategory() {
        return Subcategory::all()
            ->shuffle()
            ->first();
    }

    public function test_displayCart() {
        self::initModel();

        $cart = self::getCart();
        $product = self::getProduct();

        $response = $this->get(route('cart'));
        $response->assertStatus(200);
    }

    public function test_getCurrentCart() {
        self::initModel();

        $current_cart = CartController::getCurrentCart();
        $this->assertInstanceOf( Cart::class, $current_cart);
    }

    public function test_addToCart() {
        self::initModel();

        $cart = self::getCart();
        $initial_count = count($cart->products());
        $product = self::getProduct();
        Session::start();
        $response = $this->call('POST', route('add_to_cart'), [
            '_token' => csrf_token(),
            'item' => json_encode($product),
        ]);

        $this->assertEquals(302, $response->getStatusCode());
        $response->assertRedirect(route('sub_category', ['subcategory' => $product->subcategory()->id]));
        $this->assertCount( $initial_count + 1, $cart->products());
    }
}
